<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="/2023/11/10/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus学习笔记</title>
    <link href="/2023/11/10/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="/2023/11/10/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMvc学习笔记</title>
    <link href="/2023/11/10/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="/2023/11/10/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git的使用</title>
    <link href="/2023/10/19/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/10/19/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p><img src="/2023/10/19/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231018223048766.png" alt="image-20231018223048766"></p><p>命令如下：</p><ol><li><p><strong>clone（克隆）</strong>: 从远程仓库中把代码<strong>克隆</strong>到本地仓库 </p></li><li><p><strong>checkout （检出）</strong>:从本地仓库中<strong>检出</strong>一个仓库分支然后进行修订</p></li><li><p><strong>add（添加）</strong>: 在提交到本地仓库之前，先将代码<strong>添加</strong>到暂存区</p></li><li><p><strong>commit（提交）</strong>: <strong>提交</strong>到本地仓库</p><p>​本地仓库中保存了修改的各个历史版本 </p></li><li><p><strong>fetch (抓取)</strong> ： 从远程仓库，<strong>抓取</strong>到本地仓库，不进行任何的合并动作，一般操作比较少</p></li><li><p><strong>pull (拉取)</strong> ： 从远程仓库<strong>拉取</strong>到本地仓库，自动进行合并(merge)，然后放到到工作区，相当于 fetch+merge</p></li><li><p><strong>push（推送）</strong> : 修改完成后，需要和团队成员共享代码时，将代码<strong>推送</strong>到远程仓库</p></li></ol><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="为命令配置别名"><a href="#为命令配置别名" class="headerlink" title="为命令配置别名"></a>为命令配置别名</h3><p>这是一个起别名的操作，主要是后续有的指令很多参数，很长</p><p>不如提前设置好，起一个别名，这样来的方便</p><ol><li><p>打开gitBash,执行 touch ~&#x2F;.bashrc</p></li><li><p>在 .bashrc 文件中输入如下内容：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#用于输出git提交日志<br>alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;<br>#用于输出当前目录所有文件及基本信息<br>alias ll=&#x27;ls -al&#x27;<br></code></pre></td></tr></table></figure></li></ol><h3 id="获取本地仓库"><a href="#获取本地仓库" class="headerlink" title="获取本地仓库"></a>获取本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库 </p><ol><li>在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口 </li><li>执行命令git init </li><li>如果创建成功后可在文件夹下看到隐藏的.git目录。</li></ol><h3 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h3><p>Git工作目录下对于文件的修改(增加、删除、更新)会存在几个状态，这些修改的状态会随着我们执行Git 的命令而发生变化。</p><p><img src="/2023/10/19/Git%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231018224442467.png" alt="image-20231018224442467"></p><ul><li>git add （工作区 –&gt; 暂存区）</li><li>git commit （暂存区 –&gt; 本地仓库）</li></ul><h4 id="查看修改的状态（status）"><a href="#查看修改的状态（status）" class="headerlink" title="查看修改的状态（status）"></a>查看修改的状态（status）</h4><p>可以查看暂存区、工作区修改的状态</p><ul><li>git status</li></ul><h4 id="添加工作区到暂存区（add）"><a href="#添加工作区到暂存区（add）" class="headerlink" title="添加工作区到暂存区（add）"></a>添加工作区到暂存区（add）</h4><p>添加工作区一个或多个文件的修改到暂存区</p><ul><li>git add 单个文件名|通配符</li><li>git add. （将所有修改都add到暂存区）</li></ul><h4 id="提交暂存区到本地仓库（commit）"><a href="#提交暂存区到本地仓库（commit）" class="headerlink" title="提交暂存区到本地仓库（commit）"></a>提交暂存区到本地仓库（commit）</h4><p>提交暂存区内容到本地仓库的当前分支</p><ul><li>git commit -m ‘注释内容’</li></ul><h4 id="查看提交日志（log）"><a href="#查看提交日志（log）" class="headerlink" title="查看提交日志（log）"></a>查看提交日志（log）</h4><ul><li><p>git log [option]</p><ul><li>option<ul><li>–all ：显示所有分支</li><li>–pretty&#x3D;oneline ：将提交信息显示为一行</li><li>–abbrev-commit ：使得输出的commitId更短</li><li>–graph ：以图的形式显示</li></ul></li></ul></li><li><p>git-log</p><ul><li><p>这是前面设置的长命令的别名</p></li><li><p>完整命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log --pretty=oneline --all --graph --abbrev-commit<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul><li>作用：版本切换</li><li>git reset –hard commitID<ul><li>commitID 可以使用 git-log 或 git log 指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li>git reflog</li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="添加文件到忽略列表"><a href="#添加文件到忽略列表" class="headerlink" title="添加文件到忽略列表"></a>添加文件到忽略列表</h4><p>有些文件无需纳入Git 的管理，通常都是些自动生成的文件，比如：日志文件、编译过程中创建的临时文件… </p><p>可以设置让它们<strong>不出现在未跟踪文件列表</strong>。</p><p>方法：在工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># no .a files</span><br>*<span class="hljs-string">.a</span><br><span class="hljs-comment"># but do track lib.a, even though you&#x27;re ignoring .a files above</span><br>!lib.a<br><span class="hljs-comment"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="hljs-string">/TODO</span><br><span class="hljs-comment"># ignore all files in the build/ directory</span><br>build/<br><span class="hljs-comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br>doc/*<span class="hljs-string">.txt</span><br><span class="hljs-comment"># ignore all .pdf files in the doc/ directory</span><br>doc/**/*<span class="hljs-string">.pdf</span><br></code></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>使用分支意味着<strong>你可以把你的工作从开发主线上分离开来</strong>，进行重大的Bug修改、开发新的功能，而不影响开发主线。</p><h4 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h4><ul><li>git branch</li></ul><h4 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h4><ul><li>git branch 分支名</li></ul><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ul><li>切换到已经存在的分支<ul><li>git checkout 分支名</li></ul></li><li>直接创建并切换到一个不存在的分支（创建并切换）<ul><li>git checkout -b 分支名</li></ul></li></ul><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>一个分支上的提交可以合并到另一个分支</p><ul><li>git merge 分支名称</li></ul><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>注意：不能删除当前分支，只能删除其他分支！！！</p><ul><li>删除分支时，需要做各种检查 <ul><li>git branch -d b1</li></ul></li><li>不做任何检查，强制删除<ul><li>git branch -D b1</li></ul></li></ul><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下： </p><ol><li><p>处理文件中冲突的地方 </p></li><li><p>将解决完冲突的文件加入暂存区(add) </p></li><li><p>提交到仓库(commit) 冲突部分的内容处理如下所示：</p></li></ol><h4 id="开发中分支使用原则与流程"><a href="#开发中分支使用原则与流程" class="headerlink" title="开发中分支使用原则与流程"></a>开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。 在开发中，一般有如下分支使用原则与流程： </p><ul><li><p>master （生产） 分支</p><p> 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p></li><li><p>develop（开发）分支</p></li></ul><p>  是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。 </p><ul><li><p>feature&#x2F;xxxx分支 </p><p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。 </p></li><li><p>hotfix&#x2F;xxxx分支</p><p>从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、 develop分支。</p></li><li><p>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等 等。</p></li></ul><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2>]]></content>
    
    
    <categories>
      
      <category>必备技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反射、注解、动态代理</title>
    <link href="/2023/10/05/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
    <url>/2023/10/05/Java%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="关于反射"><a href="#关于反射" class="headerlink" title="关于反射"></a>关于反射</h2><p>​反射就是：加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器等…）</p><p>反射都是从class字节码文件中获取的内容。</p><p><strong>反射都能获取到什么？</strong></p><ul><li>获取class字节码（Class对象）</li><li>获取构造器（Constructor对象）</li><li>获取成员变量（Field对象）</li><li>获取成员方法（Method对象）</li></ul><h2 id="通过反射获取"><a href="#通过反射获取" class="headerlink" title="通过反射获取"></a>通过反射获取</h2><h3 id="获取字节码文件Class对象（三种方式）"><a href="#获取字节码文件Class对象（三种方式）" class="headerlink" title="获取字节码文件Class对象（三种方式）"></a>获取字节码文件Class对象（三种方式）</h3><ul><li><p>利用  “类名.class”</p><p>Class C1 &#x3D; 类名.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过 类名.class来获取Student类的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Student.class;<br><span class="hljs-comment">//获取全类名：com.whr.reflect.Student</span><br>System.out.println(c1.getName()); <br><span class="hljs-comment">//获取类的简名：Student</span><br>System.out.println(c1.getSimpleName()); <br></code></pre></td></tr></table></figure></li><li><p>利用  “Class.forName(“全类名”)”</p><p>Class类里面的静态方法forName（“全类名”）<strong>（最常用）</strong></p><p>该方法为：public static Class forName(String package)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符串中应该为：Student类的全类名</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.whr.reflect.Student&quot;</span>);<br></code></pre></td></tr></table></figure><p>注意：全类名可以通过 在类文件的类名处右键，copy&#x2F;Paste Special –&gt; Copy Reference 进行复制，并粘贴在函数中（注意如果粘贴在空白处则只显示类名，只有粘贴在函数中、注释里才会显示全类名）</p></li><li><p>利用  “对象.getClass()”</p><p>Object提供的方法：public Class getClass();   </p><p>Class c3 &#x3D; 对象.getClass();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">//利用对象来获取类的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> s.getClass();<br></code></pre></td></tr></table></figure></li></ul><p><strong>关于字节码文件 和 字节码文件对象：</strong></p><ul><li><p>java文件：就是我们自己编写的java代码。</p></li><li><p>字节码文件：就是通过java文件编译之后的class文件（是在硬盘上真实存在的，用眼睛能看到的）</p></li><li><p>字节码文件对象：当class文件加载到内存之后，虚拟机自动创建出来的对象。</p><p>这个对象里面至少包含了：构造方法，成员变量，成员方法。</p><p><strong>反射获取正是字节码文件对象，这个对象在内存中是唯一的。</strong></p></li></ul><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>获得所有的构造（只能public修饰）</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>获得所有的构造（包含private修饰）</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</T></td><td>获取指定构造（只能public修饰）</td></tr><tr><td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</T></td><td>获取指定构造（包含private修饰）</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-comment">//1.获得整体（class字节码文件对象）</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br><br>        <span class="hljs-comment">//2.获取构造方法对象</span><br>        <span class="hljs-comment">//获取所有构造方法（public）</span><br>        Constructor[] constructors1 = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors1) &#123;<br>            System.out.println(constructor);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有构造（带私有的）</span><br>        Constructor[] constructors2 = clazz.getDeclaredConstructors();<br><br>        <span class="hljs-keyword">for</span> (Constructor constructor : constructors2) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-comment">//获取指定的空参构造</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con1</span> <span class="hljs-operator">=</span> clazz.getConstructor();<br>        System.out.println(con1);<br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con2</span> <span class="hljs-operator">=</span> clazz.getConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        System.out.println(con2);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>        <span class="hljs-comment">//获取指定的构造(所有构造都可以获取到，包括public包括private)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con3</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        System.out.println(con3);<br>        <span class="hljs-comment">//了解 System.out.println(con3 == con1);</span><br>        <span class="hljs-comment">//每一次获取构造方法对象的时候，都会新new一个。</span><br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con4</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class);<br>        System.out.println(con4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取构造方法并创建对象"><a href="#获取构造方法并创建对象" class="headerlink" title="获取构造方法并创建对象"></a>获取构造方法并创建对象</h3><p>涉及到的方法：newInstance</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先要有一个javabean类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//测试类中的代码：</span><br><span class="hljs-comment">//需求1：</span><br><span class="hljs-comment">//获取空参，并创建对象</span><br><br><span class="hljs-comment">//1.获取整体的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><span class="hljs-comment">//2.获取空参的构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> clazz.getConstructor();<br><span class="hljs-comment">//3.利用空参构造方法创建对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) con.newInstance();<br>System.out.println(stu);<br><br><br>System.out.println(<span class="hljs-string">&quot;=============================================&quot;</span>);<br><br><br><span class="hljs-comment">//测试类中的代码：</span><br><span class="hljs-comment">//需求2：</span><br><span class="hljs-comment">//获取带参构造，并创建对象</span><br><span class="hljs-comment">//1.获取整体的字节码文件对象</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><span class="hljs-comment">//2.获取有参构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-comment">//3.临时修改构造方法的访问权限（暴力反射）</span><br>con.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//4.直接创建对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) con.newInstance(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">23</span>);<br>System.out.println(stu);<br></code></pre></td></tr></table></figure><h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><p>方法名：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有成员变量对象的数组（只能拿public的）</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组，存在就能拿到</td></tr><tr><td>Field getField(String name)</td><td>返回单个成员变量对象（只能拿public的）</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象，存在就能拿到</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获取成员变量对象</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取成员变量的对象（Field对象)只能获取public修饰的</span><br>        Field[] fields1 = clazz.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields1) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br><br>        <span class="hljs-comment">//获取成员变量的对象（public + private）</span><br>        Field[] fields2 = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields2) &#123;<br>            System.out.println(field);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-comment">//获得单个成员变量对象</span><br>        <span class="hljs-comment">//如果获取的属性是不存在的，那么会报异常</span><br>        <span class="hljs-comment">//Field field3 = clazz.getField(&quot;aaa&quot;);</span><br>        <span class="hljs-comment">//System.out.println(field3);//NoSuchFieldException</span><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field4</span> <span class="hljs-operator">=</span> clazz.getField(<span class="hljs-string">&quot;gender&quot;</span>);<br>        System.out.println(field4);<br><br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-comment">//获取单个成员变量（私有）</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field5</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(field5);<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String gender;<br><br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, gender = &quot;</span> + gender + <span class="hljs-string">&quot;, address = &quot;</span> + address + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="获取成员变量并获取值和修改值"><a href="#获取成员变量并获取值和修改值" class="headerlink" title="获取成员变量并获取值和修改值"></a>获取成员变量并获取值和修改值</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj, Object value）</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;广州&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-comment">//需求：</span><br>        <span class="hljs-comment">//利用反射获取成员变量并获取值和修改值</span><br><br>        <span class="hljs-comment">//1.获取class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取name成员变量</span><br>        <span class="hljs-comment">//field就表示name这个属性的对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">//临时修饰他的访问权限</span><br>        field.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//3.设置(修改)name的值</span><br>        <span class="hljs-comment">//参数一：表示要修改哪个对象的name？</span><br>        <span class="hljs-comment">//参数二：表示要修改为多少？</span><br>        field.set(s,<span class="hljs-string">&quot;wangwu&quot;</span>);<br><br>        <span class="hljs-comment">//3.获取name的值</span><br>        <span class="hljs-comment">//表示我要获取这个对象的name的值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String)field.get(s);<br><br>        <span class="hljs-comment">//4.打印结果</span><br>        System.out.println(result);<br><br>        System.out.println(s);<br>        System.out.println(ss);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String gender;<br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, gender = &quot;</span> + gender + <span class="hljs-string">&quot;, address = &quot;</span> + address + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h3><p>规则：</p><p>​get表示获取</p><p>​Declared表示私有</p><p>​最后的s表示所有，复数形式</p><p>​如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有成员方法对象的数组（只能拿public的）</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，存在就能拿到</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象（只能拿public的）</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象，存在就能拿到</td></tr></tbody></table><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-comment">//1.获取class对象</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.itheima.reflectdemo.Student&quot;</span>);<br><br><br>        <span class="hljs-comment">//2.获取方法</span><br>        <span class="hljs-comment">//getMethods可以获取父类中public修饰的方法</span><br>        Method[] methods1 = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods1) &#123;<br>            System.out.println(method);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">//获取所有的方法（包含私有）</span><br>        <span class="hljs-comment">//但是只能获取自己类中的方法</span><br>        Method[] methods2 = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods2) &#123;<br>            System.out.println(method);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        <span class="hljs-comment">//获取指定的方法（空参）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method3</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;sleep&quot;</span>);<br>        System.out.println(method3);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method4</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        System.out.println(method4);<br><br>        <span class="hljs-comment">//获取指定的私有方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method5</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;playGame&quot;</span>);<br>        System.out.println(method5);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="获取成员方法并运行"><a href="#获取成员方法并运行" class="headerlink" title="获取成员方法并运行"></a>获取成员方法并运行</h3><p>方法</p><p> Object invoke(Object obj, Object… args) ：运行方法</p><p>参数一：用obj对象调用该方法</p><p>参数二：调用方法的传递的参数（如果没有就不写）</p><p>返回值：方法的返回值（如果没有就不写）</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.a02reflectdemo1;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//1.获取字节码文件对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.获取一个对象</span><br>        <span class="hljs-comment">//需要用这个对象去调用方法</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <br>        <span class="hljs-comment">//3.获取一个指定的方法</span><br>        <span class="hljs-comment">//参数一：方法名</span><br>        <span class="hljs-comment">//参数二：参数列表，如果没有可以不写</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eatMethod</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        <br>        <span class="hljs-comment">//运行</span><br>        <span class="hljs-comment">//参数一：表示方法的调用对象</span><br>        <span class="hljs-comment">//参数二：方法在运行时需要的实际参数</span><br>        <span class="hljs-comment">//注意点：如果方法有返回值，那么需要接收invoke的结果</span><br>        <span class="hljs-comment">//如果方法没有返回值，则不需要接收</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) eatMethod.invoke(s, <span class="hljs-string">&quot;重庆小面&quot;</span>);<br>        System.out.println(result);<br><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String gender;<br>    <span class="hljs-keyword">public</span> String address;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">eat</span><span class="hljs-params">(String something)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生在吃&quot;</span> + something);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学生已经吃完了，非常happy&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记</title>
    <link href="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h1><ol><li><p>resources目录：</p><p>放在这个目录当中的，一般都是资源文件，配置文件<br>直接放在resources目录下的资源，等于放到类的根目录下 </p></li><li><p>开发步骤</p><ol><li><p>打包方式jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--打包方式jar--&gt;</span><br><span class="hljs-comment">&lt;!--和dependencies标签同级--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入依赖</p><ol><li>mybatis依赖</li><li>mysql驱动依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--mysql驱动依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写mybatis核心配置文件：mybatis-config.xml（内容可以从mybatis中文网中复制）</p><p>通过这个文件可以创建SqlSessionFactory对象</p><p>注意：</p><ul><li><p>这个文件名不是必须叫做mybatis-config.xml，可以用其他的名字，只是大家都采用这个名字</p></li><li><p>这个文件存放的位置也不是固定的，可以随意，但一般情况下，会放到resources目录下（根目录下）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写XxxxMapper.xml文件</p><p>在这个配置文件中编写SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;这个先不写&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--增--&gt;</span><br>    <span class="hljs-comment">&lt;!--id是这条SQL语句的唯一标示，这个id就代表了这条SQL语句--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertCar&quot;</span>&gt;</span><br>        insert into t_car(id,car,num,brand,guide_price,produce_time,car_type)<br>        values(null,&#x27;1003&#x27;,&#x27;丰田霸道&#x27;,30.0,&#x27;2000-0-11&#x27;,&#x27;燃油车&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个文件名也不是固定的，文件的位置也不是固定的</p></li><li><p>在mybatis-config.xml文件中指定XxxxMapper.xml文件的路径</p><p>注意：resourse属性会自动从类的根路径下（resourses目录下）开始查找</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定XxxxMapper.xml文件的路径--&gt;</span><br>    <span class="hljs-comment">&lt;!--resourse属性会自动从类的根路径下（resourses目录下）开始查找资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;CarMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写Mybatis程序（使用mybatis类库，编写mybatis程序，连接数据库，做增删改查）</p><ul><li><p>在mybatis当中，负责执行SQL语句的那个对象叫：SqlSession</p><p>是Java程序和数据库之间的依次会话</p></li><li><p>要想获取SQLSession对象，需要先获取一个对象：SqlSessionFactory</p><p>通过SqlSessionFactory工厂来生产SQLSession对象</p></li><li><p>要想获取SQLSessionFactory对象，需要先获取一个对象：SqlSessionFactoryBuilder</p><p>通过SqlSessionFactoryBuilder的build方法来获取一个</p><p>SQLSessionFactory对象</p></li></ul></li></ol></li><li><p>从XML中构建SQLSessionFactory</p><p>通过官方的这句话，能想到：</p><ul><li><p>在Mybatis中一定有一个很重要的对象，这个对象是：SqlSessionFactory</p></li><li><p>SQLSessionFactory对象的创建需要XML</p></li></ul><p>XML是什么：</p><p>​他是一个配置文件</p></li><li><p>Mybatis中有两个主要的配置文件：</p><ol><li><p>mybatis-config.xml， 这是核心配置文件，主要配置连接数据库的信息等…（一般只有一个）</p></li><li><p>XxxxMapper.xml，这个文件是专门用来编写SQL语句的配置文件（一般一个数据库表对应一个配置文件）</p><p>比如：</p><ul><li>t_user表，一般会对应一个UserMapper.xml</li><li>t_student表，一般会对应一个StudentMapper.xml</li></ul></li></ol></li><li><p>关于第一个程序的小细节</p><ul><li><p>SQL语句结尾可以不加 “;”</p></li><li><p>关于Resources.getResourceAsStream()</p><p>凡是遇到resource这个单词，大部分情况下，这种加载资源的方式都是从类的根路径下开始查找</p></li><li><p>Resources.getResourceAsStream()也可以通过new一个InputStream输入流来代替，但是只能使用绝对路径，项目的移植性不好</p></li><li><p>mybatis核心配置文件的名字不一定是mybatis-config.xml，存放的路径也可以随意，但是为了项目的健壮性，移植性，最好还是放在类的根目录下面</p></li><li><p>InputStream is &#x3D; ClassLoader.getSystemClassLoader().getResourceAsStream(“mybatis-config.xml”);</p><p>使用系统类加载器也可以代替Resources.getResourceAsStream()，也是可以使用相对路径</p><p><strong>其实mybatis的Resources.getResourceAsStream()方法底层也是调用的这个ClassLoader的方法</strong></p></li><li><p>CarMapper.xml文件的 名字和路径 也是不固定的</p></li><li><p>mybatis-config.xml中的<mapper>标签</mapper></p><ul><li>resource属性：从类路径下加载资源</li><li>url属性：使用绝对路径加载资源（语法格式“file:&#x2F;&#x2F;&#x2F;绝对路径”）</li></ul></li></ul></li><li><p>关于mybatis的事务管理机制（深度剖析）</p><ul><li><p>在mybatis-config,xml文件中，可以通过以下的配置进行mybatis的事务管理</p><p>&lt;transactionManager  type&#x3D;”JDBC”&#x2F;&gt;</p></li><li><p>type属性的值包括两个(不区分大小写)：</p><ul><li>JDBC</li><li>MANAGED（managed）</li></ul></li><li><p>在mybatis中提供了两种事务管理机制：</p><ol><li><p>JDBC事务管理机制</p><ul><li><p>表示mybatis框架自己管理事务，自己采用原生的JDBC代码去管理任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">conn.setAutoConnit(<span class="hljs-literal">false</span>);开启事务<br>...业务处理...<br>conn.commit(); 手动提交事务<br></code></pre></td></tr></table></figure><p>使用JDBC事务管理器的话，底层创建的事务管理器对象是：JdbcTransaction对象</p></li></ul></li><li><p>managed事务管理机制</p><ul><li><p>mybatis不在负责事务管理了，事务管理交给其他容器来做，比如Spring</p></li><li><p>如果当前只有mybatis的情况下，如果配置为MANAGED，则事务管理这一块实际上没人负责</p><p>也就是意味着<strong>事务压根没开启</strong></p></li></ul></li><li><p><strong>重点：只要autoCommit是true，就表示没有开启事务</strong></p></li></ol></li></ul></li><li><p>第一个完整的mybatis程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisCompleteTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>            <span class="hljs-comment">// 开启会话（底层会开启事务）</span><br>            sqlSession = sqlSessionFactory.openSession();<br>            <span class="hljs-comment">// 执行SQL语句，处理相关业务</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;insertCar&quot;</span>);<br>            System.out.println(count);<br>            <span class="hljs-comment">// 执行到这里，没有发生任何异常，提交事务。终止事务。</span><br>            sqlSession.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 最好回滚事务</span><br>            <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>                sqlSession.rollback();<br>            &#125;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭会话（释放资源）</span><br>            <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>                sqlSession.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="关于JUnit测试工具"><a href="#关于JUnit测试工具" class="headerlink" title="关于JUnit测试工具"></a>关于JUnit测试工具</h1><h2 id="关于测试，以及什么是JUnit？"><a href="#关于测试，以及什么是JUnit？" class="headerlink" title="关于测试，以及什么是JUnit？"></a>关于测试，以及什么是JUnit？</h2><p>JUnit是专⻔做单元测试的组件。 </p><p>在开发过程中，我们必须对自己写的每⼀个业务⽅法负责，所以我们需要编写一些测试方法来测试，保证每个业务方法都能够通过测试。</p><p>单元测试中有两个重要概念：</p><ol><li>实际值：被测试的业务方法真正的执行结果</li><li>期望值：期望的执行结果</li></ol><p>@Test这个注解很重要</p><p>只要被这个注解标注的方法就是一个测试方法</p><h2 id="关于测试的一些规范"><a href="#关于测试的一些规范" class="headerlink" title="关于测试的一些规范"></a>关于测试的一些规范</h2><ol><li><p>测试类名字规范：要测试的类名+Test（如：MathServiceTest）</p><p>测试方法名字规范：test+要测试的方法名（如：testSum）</p></li><li><p>一般是一个业务方法对应一个测试方法</p></li><li></li></ol><h1 id="关于logback日志组件"><a href="#关于logback日志组件" class="headerlink" title="关于logback日志组件"></a>关于logback日志组件</h1><p>mybatis常见的集成的日志组件有哪些？</p><ul><li>SLF4J（沙拉风）：沙拉风是一个日志标准，其中有一个框架叫做logback，它实现了沙拉风规范</li><li>LOG4J</li><li>LOG4J2</li><li>STDOUT_LOGGING</li><li>……</li><li>LOG4J、LOG4J2、logback 都是同一个作者开发的</li></ul><h2 id="STDOUT-LOGGING（标准日志）"><a href="#STDOUT-LOGGING（标准日志）" class="headerlink" title="STDOUT_LOGGING（标准日志）"></a>STDOUT_LOGGING（标准日志）</h2><p>STDOUT_LOGGING是标准日志，mybatis已经实现了这种标准日志，mybatis框架本身已经实现了这种标准，只要开启即可。</p><p>开启方法是在mybatis-config.xml文件中使用settings标签进行开启：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mybatis对标准日志的实现。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SLF4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：settings标签必须放在configuration标签内的最前面（如果有properties标签，则放在第二位，也就是properties标签的后面），否则会报如下错误：</p><ul><li>大致的意思是说configuration标签内的标签<strong>必须按照指定顺序排列</strong>（这是由上面的<strong>mybatis-3-config.dtd文件规定的</strong>）</li><li>dtd：文档类型规范的意思，mybatis-3-config.dtd的作用就是约束mybatis-config.xml文档：<ul><li>可以出现什么标签</li><li>标签的嵌套规则是什么样的</li><li>每个标签中有什么属性，属性值都有什么</li><li>……</li></ul></li><li><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231009112027273.png" alt="image-20231009112027273"></li></ul><h2 id="logback（第三方日志框架）"><a href="#logback（第三方日志框架）" class="headerlink" title="logback（第三方日志框架）"></a>logback（第三方日志框架）</h2><p>logback日志框架实现了SLF4J标准（沙拉风：日志门面、日志标准）</p><p>mybatis集成logback：</p><ol><li><p>在pom.xml文件中引入logback依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入logback的依赖，这个日志框架实现了slf4j规范--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入logback所必须的xml配置文件</p><ul><li><p>这个配置文件的名字<strong>必须</strong>叫做：logback.xml 或 logback-test.xml</p><p>这个配置文件<strong>必须</strong>放到类的根路径下，不能是其他位置</p><p>主要配置日志输出的相关级别、日志具体的格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br>        <br>     <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>                 <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>     <br>         <span class="hljs-comment">&lt;!--mybatis log configure--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.apache.ibatis&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;TRACE&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.Connection&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.Statement&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql.PreparedStatement&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>     <br>         <span class="hljs-comment">&lt;!-- 日志输出级别,logback日志级别包括五个：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>        <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>日志输出级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</p><p>级别越高，输出的信息越少，ERROR级别只有在报错的时候才输出日志</p></li></ul><p>使用第三方日志框架，可以不配置&lt;settings&gt;标签！</p></li></ol><h1 id="Mybatis工具类的编写"><a href="#Mybatis工具类的编写" class="headerlink" title="Mybatis工具类的编写"></a>Mybatis工具类的编写</h1><p>可以编写一个关于sqlSession的工具类，把这些功能封装起来，更方便</p><h2 id="工具类的规范："><a href="#工具类的规范：" class="headerlink" title="工具类的规范："></a>工具类的规范：</h2><ul><li>工具类的构造方法一般都是私有化的。为了防止new对象</li><li>工具类中所有的方法都是静态(static)的，直接采用类名即可调用。不需要new对象。</li></ul><h2 id="openSession方法"><a href="#openSession方法" class="headerlink" title="openSession方法"></a>openSession方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">return</span> sqlSession;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果按照此方法，则每次调用openSession方法时，都会创造一个新的SqlSessionFactory对象，但实际上并不需要（很浪费资源）。</p><p>通常来讲，一个SqlSessionFactory对应一个environment，一个environment通常是一个数据库。</p><p>所以可以将这一部分代码<strong>放入static静态代码块中</strong>，静态代码块中的内容在<strong>类加载时初始化（只初始化一次）</strong></p><p>更改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取会话对象。</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 会话对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br></code></pre></td></tr></table></figure><p>拥有工具类之后，测试方法也变得简洁了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertCarByUtil</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;insertCar&quot;</span>);<br>System.out.println(count);<br>sqlSession.commit();<br>sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Mybatis的增删改查"><a href="#Mybatis的增删改查" class="headerlink" title="Mybatis的增删改查"></a>Mybatis的增删改查</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>值 显然是写死到配置文件中的。<br>这个在实际开发中是不存在的。<br>一定是前端的form表单提交过来数据。然后将值传给sql语句。</p><p>实际编写insert时，不可能把insert语句中的参数写死在配置文件中，这是不可能的。</p><p>一定是前端的form表单提交过来数据。用一个“东西”来装所有的参数，然后将值传给sql语句。</p><p>这个“东西”可以是Map也可以是POJO类</p><p><strong>JDBC中是怎么实现的？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_car(id,car_num,brand,guide_price,produce_time,car_type) values(null,?,?,?,?,?)&quot;</span>;<br>ps.setString(<span class="hljs-number">1</span>, xxx);<br>ps.setString(<span class="hljs-number">2</span>, yyy);<br>....<br></code></pre></td></tr></table></figure><ul><li><p>jdbc：用 “?” 来作为占位符</p></li><li><p>mybatis：用”#{xxxxx}”来作为占位符</p></li></ul><h3 id="用Map集合传参"><a href="#用Map集合传参" class="headerlink" title="用Map集合传参"></a>用Map集合传参</h3><p>在方法中创建一个HashMap</p><ul><li>key用来使数据与insert语句中的参数一一对应</li><li>value表示数据的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertCar</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br><br>        <span class="hljs-comment">// 前端传过来数据了。</span><br>        <span class="hljs-comment">// 这个对象我们先使用Map集合进行数据的封装。</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;carNum&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-string">&quot;比亚迪汉2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;guidePrice&quot;</span>, <span class="hljs-number">10.0</span>);<br>        map.put(<span class="hljs-string">&quot;produceTime&quot;</span>, <span class="hljs-string">&quot;2020-11-11&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;carType&quot;</span>, <span class="hljs-string">&quot;电车&quot;</span>);<br><br>        <span class="hljs-comment">// 执行SQL语句</span><br>        <span class="hljs-comment">// insert方法的参数：</span><br>        <span class="hljs-comment">// 第一个参数：sqlId，从CarMapper.xml文件中复制。</span><br>        <span class="hljs-comment">// 第二个参数：封装数据的对象。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;insertCar&quot;</span>, map);<br>        System.out.println(count);<br><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>对应的CarMapper.xml文件中的insert标签如下：</p><ul><li>#{}中的变量名 要与Map中的key一一对应</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertCar&quot;</span>&gt;</span><br>    insert into t_car(id,car_num,brand,guide_price,produce_time,car_type) <br>    values(null,#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用POJO类传参"><a href="#用POJO类传参" class="headerlink" title="用POJO类传参"></a>用POJO类传参</h3><p>pojo包内创建一个Car类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-comment">// 数据库表当中的字段应该和pojo类的属性一一对应。</span><br>    <span class="hljs-comment">// 建议使用包装类，这样可以防止null的问题。（比如别用int，用Integer）</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String carNum;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> Double guidePrice;<br>    <span class="hljs-keyword">private</span> String produceTime;<br>    <span class="hljs-keyword">private</span> String carType;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, carNum=&#x27;&quot;</span> + carNum + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, guidePrice=&quot;</span> + guidePrice +<br>                <span class="hljs-string">&quot;, produceTime=&#x27;&quot;</span> + produceTime + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, carType=&#x27;&quot;</span> + carType + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCarNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> carNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCarNum</span><span class="hljs-params">(String carNum)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carNum = carNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBrand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrand</span><span class="hljs-params">(String brand)</span> &#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getGuidePrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> guidePrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGuidePrice</span><span class="hljs-params">(Double guidePrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.guidePrice = guidePrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProduceTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> produceTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProduceTime</span><span class="hljs-params">(String produceTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.produceTime = produceTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCarType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> carType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCarType</span><span class="hljs-params">(String carType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.carType = carType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(Long id, String carNum, String brand, Double guidePrice, String produceTime, String carType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.carNum = carNum;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>        <span class="hljs-built_in">this</span>.guidePrice = guidePrice;<br>        <span class="hljs-built_in">this</span>.produceTime = produceTime;<br>        <span class="hljs-built_in">this</span>.carType = carType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertCarByPOJO</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br>    <span class="hljs-comment">// 封装数据</span><br>    <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;3333&quot;</span>, <span class="hljs-string">&quot;比亚迪秦&quot;</span>, <span class="hljs-number">30.0</span>, <span class="hljs-string">&quot;2020-11-11&quot;</span>, <span class="hljs-string">&quot;新能源&quot;</span>);<br>    <span class="hljs-comment">// 执行sql</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;insertCar&quot;</span>, car); <br>    System.out.println(count);<br><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>insert标签中SQL语句中的”#{}”中写的是什么：</p><ul><li><p>POJO类中各个属性（成员变量）的名称</p></li><li><p>其实<strong>严谨一点说</strong>，这里应该填的是：每个get方法的方法名去掉get并将首字母小写之后的名称</p><p>如：getProduceTime —&gt; produceTime</p><p>只不过得到的名称<strong>恰好和POJO类中的属性名相同</strong>而已！（毕竟理论上get方法的方法名可以任意取）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertCar&quot;</span>&gt;</span><br>insert into t_car(id,car_num,brand,guide_price,produce_time,car_type)<br>    values(null,#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>delete from t_car where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的”#{}”中可以写任意名称，因为只有一个参数，所以占位符内名称可以任意（不过最好见名知意）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br><span class="hljs-comment">// 执行SQL语句</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.delete(<span class="hljs-string">&quot;deleteById&quot;</span>, <span class="hljs-number">66</span>);<br>System.out.println(count);<br>sqlSession.commit();<br>sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：上述代码中的66本来是一个int变量，实际上66会被<strong>自动封装成一个包装类</strong>传入</p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateById&quot;</span>&gt;</span><br>    update t_car set<br>    car_num=#&#123;carNum&#125;,<br>   brand=#&#123;brand&#125;,<br>    guide_price=#&#123;guidePrice&#125;,<br>    produce_time=#&#123;produceTime&#125;,<br>    car_type=#&#123;carType&#125;<br>    where<br>    id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br>    <span class="hljs-comment">// 准备数据</span><br>    <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;9999&quot;</span>, <span class="hljs-string">&quot;凯美瑞&quot;</span>, <span class="hljs-number">30.3</span>, <span class="hljs-string">&quot;1999-11-10&quot;</span>, <span class="hljs-string">&quot;燃油车&quot;</span>);<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.update(<span class="hljs-string">&quot;updateById&quot;</span>, car);<br>    System.out.println(count);<br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：id传入4L是因为数据库表中设置id字段为bigint类型，需要用long类型的数据与之对应</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="查一个"><a href="#查一个" class="headerlink" title="查一个"></a>查一个</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span><br>select * from t_car where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：关于resultType属性：</p><ul><li><strong>resultType属性必须填！！！</strong>不然mybatis根本不清楚 查询出来的结果集 要封装成什么类型的对象！！！就会报错！！！</li><li>必须填全类名：com.whr.mybatis.pojo.Car</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;selectById&quot;</span>, <span class="hljs-number">1</span>);<br>System.out.println(car);<br>sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>底层执行过程：</p><ol><li>执行DQL语句。查询。根据id查询。返回结果一定是一条。</li><li>mybatis底层执行了select语句之后，一定会返回一个结果集对象：ResultSet</li><li>mybatis应该从ResultSet中取出数据，封装java对象。（所以才会返回一个java对象）</li></ol><p>此时查询结果为：</p><p><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231010122445776.png" alt="image-20231010122445776"></p><p>可以看到有很多null值，说明有一部分值并未传进去，这里的原因是：</p><ul><li><p>数据库表中的字段为：id、car_num、brand、guide_price、produce_time、car_type</p><p>而Car类中属性值为：id、carNum、brand、guidePrice、produceTime、carType</p></li><li><p>其中id、brand字段是相同的</p><p>其他字段不同，所以在映射的时候找不到对应的变量</p><p>这也是使用”select *”的弊端</p></li><li><p>实际上应该在SQL语句中将它们一一对应</p></li></ul><p>于是xml文件中应该改成如下形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span><br>select<br>id,<br>    car_num as carNum,<br>    brand,<br>    guide_price as guidePrice,<br>produce_time as produceTime,<br>car_type as carType<br>from<br>t_car<br>where<br>id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行测试方法testSelectById()，查询结果如下：</p><p><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231010123531011.png" alt="image-20231010123531011"></p><p>注意：如果报如下错误，则需要去掉xml文件中select标签内的注释内容</p><p><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231010121939715.png" alt="image-20231010121939715"></p><p>或</p><p><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231010122330979.png" alt="image-20231010122330979"></p><h3 id="查一堆"><a href="#查一堆" class="headerlink" title="查一堆"></a>查一堆</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.powernode.mybatis.pojo.Car&quot;</span>&gt;</span><br>    select<br>    id,car_num as carNum,brand,guide_price as guidePrice,<br>    produce_time as produceTime,<br>    car_type as carType<br>    from<br>    t_car<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    List&lt;Car&gt; cars = sqlSession.selectList(<span class="hljs-string">&quot;selectAll&quot;</span>);<br>    <span class="hljs-comment">// 遍历（Lambda表达式）</span><br>    cars.forEach(car -&gt; System.out.println(car));<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：虽然查询结果返回的是List&lt;Car&gt;，但resultType属性的值依然是Car的全类名</p><h1 id="关于namespace"><a href="#关于namespace" class="headerlink" title="关于namespace"></a>关于namespace</h1><p>上述测试方法testSelectAll()运行结果如下：（报错）</p><p><img src="/2023/10/05/Mybatis%E7%AC%94%E8%AE%B0/image-20231010124846408.png" alt="image-20231010124846408"></p><p>原因：</p><ul><li><p>CarMapper.xml中有id为”selectAll”的SQL语句之外</p><p>UserMapper.xml中也有id为”selectAll”的SQL语句</p><p>mybatis无法确定应该运行哪个，于是报错</p></li><li><p>解决办法：</p><ol><li><p>设置mapper标签中的namespace属性如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;CarMapper&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将测试方法中sqlSession.selectList()方法的参数设置为”namespace值.id”的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.openSession();<br>    <span class="hljs-comment">// 执行SQL语句(参数由&quot;selectAll&quot;改为&quot;CarMapper.selectAll&quot;)</span><br>    List&lt;Car&gt; cars = sqlSession.selectList(<span class="hljs-string">&quot;CarMapper.selectAll&quot;</span>);<br>    <span class="hljs-comment">// 遍历（Lambda表达式）</span><br>    cars.forEach(car -&gt; System.out.println(car));<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><p>总结：</p><ul><li>namespace是为了防止SQL语句id重复的问题</li><li>为了避免id重复，可以使用”namespace值.id”的形式</li></ul><h1 id="核心配置文件——mybatis-config-xml"><a href="#核心配置文件——mybatis-config-xml" class="headerlink" title="核心配置文件——mybatis-config.xml"></a>核心配置文件——mybatis-config.xml</h1><p>mybatis-config.xml示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--java.util.Properties类。是一个Map集合。key和value都是String类型--&gt;</span><br>    <span class="hljs-comment">&lt;!--在properties标签中可以配置很多属性--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;properties&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--这是其中的一个属性--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;属性名&quot; value=&quot;属性值&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;jdbc.driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="hljs-comment">        &lt;property name=&quot;jdbc.url&quot; value=&quot;jdbc:mysql://localhost:3306/powernode&quot;/&gt;</span><br><span class="hljs-comment">        &lt;property name=&quot;jdbc.username&quot; value=&quot;root&quot;/&gt;</span><br><span class="hljs-comment">        &lt;property name=&quot;jdbc.password&quot; value=&quot;root&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/properties&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--resource,一定是从类路径下开始查找资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--从绝对路径当中加载资源。绝对路径怎么写？file:///路径--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;properties url=&quot;file:///d:/jdbc.properties&quot; /&gt;--&gt;</span><br><br><br><br>    <span class="hljs-comment">&lt;!--default表示默认使用的环境。--&gt;</span><br>    <span class="hljs-comment">&lt;!--默认环境什么意思？当你使用mybatis创建SqlSessionFactory对象的时候，没有指定环境的话，默认使用哪个环境。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;powernodeDB&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--其中的一个环境。连接的数据库是powernodeDB--&gt;</span><br>        <span class="hljs-comment">&lt;!--一般一个环境对应一个数据库--&gt;</span><br>        <span class="hljs-comment">&lt;!--一般一个数据库会对应一个SqlSessionFactory对象。--&gt;</span><br>        <span class="hljs-comment">&lt;!--所以一个环境environment会对应一个SqlSessionFactory对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;powernodeDB&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                transactionManager标签：</span><br><span class="hljs-comment">                    1.作用：配置事务管理器。指定mybatis具体使用什么方式去管理事务。</span><br><span class="hljs-comment">                    2.type属性有两个值：</span><br><span class="hljs-comment">                        第一个：JDBC: 使用原生的JDBC代码来管理事务。</span><br><span class="hljs-comment">                            conn.setAutoCommit(false);</span><br><span class="hljs-comment">                            ....</span><br><span class="hljs-comment">                            conn.commit();</span><br><span class="hljs-comment">                        第二个：MANAGED：mybatis不再负责事务的管理，将事务管理交给其它的JEE(JavaEE)容器来管理。例如：spring</span><br><span class="hljs-comment">                    3. 大小写无所谓。不区分大小写。但是不能写其他值。只能是二选一：</span><br><span class="hljs-comment">                        jdbc、managed</span><br><span class="hljs-comment">                    4. 在mybatis中提供了一个事务管理器接口：Transaction</span><br><span class="hljs-comment">                        该接口下有两个实现类：</span><br><span class="hljs-comment">                            JdbcTransaction</span><br><span class="hljs-comment">                            ManagedTransaction</span><br><span class="hljs-comment">                        如果type=&quot;JDBC&quot;，那么底层会实例化JdbcTransaction对象。</span><br><span class="hljs-comment">                        如果type=&quot;MANAGED&quot;，那么底层会实例化ManagedTransaction</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                dataSource配置：</span><br><span class="hljs-comment">                    1.dataSource被称为数据源。</span><br><span class="hljs-comment">                    2.dataSource作用是什么？为程序提供Connection对象。（但凡是给程序提供Connection对象的，都叫做数据源。）</span><br><span class="hljs-comment">                    3.数据源实际上是一套规范。JDK中有这套规范：javax.sql.DataSource（这个数据源的规范，这套接口实际上是JDK规定的。）</span><br><span class="hljs-comment">                    4.我们自己也可以编写数据源组件，只要实现javax.sql.DataSource接口就行了。实现接口当中所有的方法。这样就有了自己的数据源。</span><br><span class="hljs-comment">                    比如你可以写一个属于自己的数据库连接池（数据库连接池是提供连接对象的，所以数据库连接池就是一个数据源）。</span><br><span class="hljs-comment">                    5.常见的数据源组件有哪些呢【常见的数据库连接池有哪些呢】？</span><br><span class="hljs-comment">                        阿里巴巴的德鲁伊连接池：druid</span><br><span class="hljs-comment">                        c3p0</span><br><span class="hljs-comment">                        dbcp</span><br><span class="hljs-comment">                        ....</span><br><span class="hljs-comment">                    6. type属性用来指定数据源的类型，就是指定具体使用什么方式来获取Connection对象：</span><br><span class="hljs-comment">                        type属性有三个值：必须是三选一。</span><br><span class="hljs-comment">                        type=&quot;[UNPOOLED|POOLED|JNDI]&quot;</span><br><span class="hljs-comment">                        UNPOOLED：不使用数据库连接池技术。每一次请求过来之后，都是创建新的Connection对象。</span><br><span class="hljs-comment">                        POOLED：使用mybatis自己实现的数据库连接池。</span><br><span class="hljs-comment">                        JNDI：集成其它第三方的数据库连接池。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                        JNDI是一套规范。谁实现了这套规范呢？大部分的web容器都实现了JNDI规范：</span><br><span class="hljs-comment">                            例如：Tomcat、Jetty、WebLogic、WebSphere，这些服务器(容器)都实现了JNDI规范。</span><br><span class="hljs-comment">                        JNDI是：java命名目录接口。Tomcat服务器实现了这个规范。</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--提醒：正常使用连接池的话，池中有很多参数是需要设置的。设置好参数，可以让连接池发挥的更好。事半功倍的效果。--&gt;</span><br>                <span class="hljs-comment">&lt;!--具体连接池当中的参数如何配置呢？需要反复的根据当前业务情况进行测试。--&gt;</span><br>                <span class="hljs-comment">&lt;!--poolMaximumActiveConnections：连接池当中最多的正在使用的连接对象的数量上限。最多有多少个连接可以活动。默认值10--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolMaximumActiveConnections&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--每隔2秒打印日志，并且尝试获取连接对象--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolTimeToWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--强行让某个连接空闲，超时时间的设置--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolMaximumCheckoutTime&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--最多的空闲数量--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolMaximumIdleConnections&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这是mybatis的另一个环境，也就是连接的数据库是另一个数据库mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mybatisDB&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;CarMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="configuration标签"><a href="#configuration标签" class="headerlink" title="configuration标签"></a>configuration标签</h2><p>作用：根标签，表示配置信息</p><h2 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h2><p>作用：环境标签（里面可以有多个环境）</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>default属性</p><ul><li><p>表示默认使用的环境。</p></li><li><p>设置默认环境有什么用？</p><p>当在程序中使用mybatis创建SqlSessionFactory对象的时候，如果没有在参数中指定某一环境，则默认使用default属性所设置的环境。</p></li><li><p>default后⾯填写的是 子标签environment中的id</p><p>default的值只需要和某一对environment标签的id值⼀致即可</p></li><li><p>环境是指什么？</p><p>这个暂时不清楚！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p></li></ul><h3 id="子标签"><a href="#子标签" class="headerlink" title="子标签"></a>子标签</h3><h4 id="environment标签"><a href="#environment标签" class="headerlink" title="environment标签"></a>environment标签</h4><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p>id：给当前环境⼀个唯⼀标识，该标识⽤在environments的default后⾯，⽤来指定默认环境的<br>选择</p><h5 id="子标签-1"><a href="#子标签-1" class="headerlink" title="子标签"></a>子标签</h5><p>也就是说mybatis的环境可以配置多个数据<br>源。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode热题100刷题记录</title>
    <link href="/2023/09/16/LeetCode%E7%83%AD%E9%A2%98100%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/16/LeetCode%E7%83%AD%E9%A2%98100%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><h2 id="两数之和（简单）"><a href="#两数之和（简单）" class="headerlink" title="两数之和（简单）"></a>两数之和（简单）</h2><p>题目：</p><p><img src="/2023/09/16/LeetCode%E7%83%AD%E9%A2%98100%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C(1).png" alt="两数之和(1)"></p><h3 id="方法一：利用哈希表"><a href="#方法一：利用哈希表" class="headerlink" title="方法一：利用哈希表"></a>方法一：利用哈希表</h3><p>分析：哈希表可以在O(1)时间复杂度下查找元素，于是想到此方法</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><ol><li><p>遍历数组</p></li><li><p>对于每一个nums[i]，如果哈希表中没有值为target-nums[i]的元素，则当前情况无法得到答案，那就将nums[i]存入哈希表，并继续遍历</p></li><li><p>如果nums[i]能在哈希表中找到值为target-nums[i]的元素凑成一对，则找到答案，new一个数组装入两个值，return即可</p></li><li><p>这里哈希表的长度设置为nums.length-1即可</p><p>因为题目规定：在数组全部遍历完成之前，一定能找到答案。所以不存在数组nums中所有元素都存入哈希表的情况，最多也就是存入nums.length-1个元素</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-comment">//这里设置hashmap容量是为了防止hashmap不断自动扩容，浪费时间。容量写l-1就行（因为一定会找到一对！）</span><br>        HashMap&lt;Integer, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;(l-<span class="hljs-number">1</span>);<br>        hm.put(nums[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">//如果hashmap中有与之匹配的值，则直接返回对应的数组</span><br>            <span class="hljs-keyword">if</span>(hm.containsKey(target-nums[i])) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i,hm.get(target-nums[i])&#125; ;<br>            hm.put(nums[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：利用双指针"><a href="#方法二：利用双指针" class="headerlink" title="方法二：利用双指针"></a>方法二：利用双指针</h3><p>分析：哈希表是拿空间换时间，如果是想要空闲复杂度为O(1)的话，就可以用双指针</p><p>时间复杂度：O(nlogn)</p><p>空间复杂度：O(1)</p><ol><li><p>先将nums数组升序排列</p></li><li><p>定义两个指针i、j，起初分别指向 一头一尾（即分别指向最小、最大的数）</p></li><li><p>如果 两数之和大于target ,则应将大数减小，即j–</p><p>如果 两数之和小于target ,则应将大数减小，即i++</p></li><li><p>如此反复，直到找到答案为止…</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        先排序，再双指针</span><br><span class="hljs-comment">        起初一头一尾</span><br><span class="hljs-comment">            如果两数之和&gt;target,则应将大数减小，即j--</span><br><span class="hljs-comment">            如果两数之和&lt;target,则应将大数减小，即i++</span><br><span class="hljs-comment">            直到找到为止</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span>[] n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            n[i] = nums[i];<br>        &#125;<br>        Arrays.sort(nums);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j)&#123;<br>            <span class="hljs-keyword">if</span> (nums[i]+nums[j]&gt;target)&#123;<br>                j--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i]+nums[j]&lt;target) &#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                i = nums[i];<br>                j = nums[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">//由于排序之后的数组下标打乱了，所以需要在原数组中找到对应下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n.length; k++) &#123;<br>            <span class="hljs-keyword">if</span>(i == n[k]) &#123;<br>                result[<span class="hljs-number">0</span>] = k; <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> n.length-<span class="hljs-number">1</span>; k &gt; <span class="hljs-number">0</span>; k--) &#123;<br>            <span class="hljs-keyword">if</span> (j == n[k]) &#123;<br>                result[<span class="hljs-number">1</span>] = k; <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h2><p>题目：</p><p><img src="/2023/09/16/LeetCode%E7%83%AD%E9%A2%98100%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20231006165421137.png" alt="image-20231006165421137"></p><h3 id="方法一：哈希表-字符数组排序"><a href="#方法一：哈希表-字符数组排序" class="headerlink" title="方法一：哈希表+字符数组排序"></a>方法一：哈希表+字符数组排序</h3><p>分析：字母异位词之间的区别在于字母的排列顺序不同，那么通过排序即可让它们相同</p><p>时间复杂度：O(n*klogk)   (klogk是字符串排序的时间复杂度)</p><p>空间复杂度：O(nk)(k是字符串平均长度)</p><ol><li>定义一个哈希表，key：排序之后的字符串，value：和key对应的所有字母异位词的列表</li><li>遍历每个元素，将String转化为char[]来排序，再通过ValueOf(s)方法转化回String</li><li>将排序后的String和哈希表中的所有key对比<ol><li>如果存在，则将原String加到对应的list异位词列表中</li><li>如果不存在，说明是新的异位词，则创建新的list异位词列表，并和该String一起存入哈希表</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        HashMap&lt;String, List&lt;String&gt;&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; strs.length; i++) &#123;<br>            <span class="hljs-type">char</span>[] s = strs[i].toCharArray();       <span class="hljs-comment">//字符串转换为char[]（方便后面排序）</span><br>            Arrays.sort(s);                         <span class="hljs-comment">//排序（异位词排序之后就一样了）</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.valueOf(s);          <span class="hljs-comment">//转化回字符串，来判断是否和HashMap中字符串相同</span><br>            <span class="hljs-keyword">if</span> (hm.containsKey(s1)) &#123;                <span class="hljs-comment">//每次判断，如果有一样的，就放入排序之前的字符串：strs[i]</span><br>                hm.get(s1).add(strs[i]);<br>                hm.put(s1, hm.get(s1));<br>            &#125; <span class="hljs-keyword">else</span> &#123;                                   <span class="hljs-comment">//如果是新的异位词，则创建新的list&lt;String&gt;加入HashMap</span><br>                List&lt;String&gt; slist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();   <span class="hljs-comment">//HashMap中的value是一个String的list</span><br>                slist.add(strs[i]);<br>                hm.put(s1, slist);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//取出HashMap中所有的value，也就是所有的List&lt;String&gt;,放入一个大的Lits&lt;List&lt;String&gt;&gt;</span><br>        ArrayList&lt;List&lt;String&gt;&gt; lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>        Collection&lt;List&lt;String&gt;&gt; values = hm.values();<br>        <span class="hljs-keyword">for</span> (List&lt;String&gt; value : values) &#123;<br>            lists.add(value);<br>        &#125;<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>做一些代码瘦身：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        HashMap&lt;String, List&lt;String&gt;&gt; slhm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s:strs)&#123;<br>            <span class="hljs-type">char</span>[] charArray = s.toCharArray();<br>            Arrays.sort(charArray);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.valueOf(charArray);      <span class="hljs-comment">//注意这里不能用toString()，那样只会转化成char[]的地址</span><br>            <span class="hljs-keyword">if</span> (!slhm.containsKey(s1)) slhm.put(s1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br><br>            <span class="hljs-comment">//直接加入就可以，不必再使用一次slhm.put()，主要是 slhm.get(s1).add(s)返回的是Boolean</span><br>            <span class="hljs-comment">//下面这句是被复用，无论需不需要再HashMap中新建List，都需要往里面添加元素（妙极！）</span><br>            slhm.get(s1).add(s);<br>            <span class="hljs-comment">//slhm.put(s1,slhm.get(s1).add(s));</span><br>        &#125;<br>        <span class="hljs-comment">//slhm.values()本来是返回Collection对象的，但是可以直接放入ArrayList中进行转化</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(slhm.values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：字符计数法"><a href="#方法二：字符计数法" class="headerlink" title="方法二：字符计数法"></a>方法二：字符计数法</h3><p>分析：如果想省去排序的时间，可以用空间换时间，<strong>用一个长26的数组来记录该字符串中26个字母分别出现的次数</strong>，并将该数组转化成字符串的形式记录（”|0|1|2|0|2|……”）（因为字符串方便比较）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        HashMap&lt;String, ArrayList&lt;String&gt;&gt; slhm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, ArrayList&lt;String&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s:strs)&#123;<br>            <span class="hljs-type">int</span>[] charsnum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>                charsnum[s.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>]++;           <span class="hljs-comment">//在数组对应位置+1</span><br>            &#125;<br>            <br>            <span class="hljs-comment">//String s1 = new String();</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-comment">//最终形成的String长这样：|0|1|2|0|2|......（以此类推），用来表示单词中26个字母出现的次数，从而判断异位词</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c:charsnum) &#123;                      <br>                sb.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>                sb.append(c);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> sb.toString();<br>            <span class="hljs-keyword">if</span> (!slhm.containsKey(s2)) slhm.put(s2,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>            slhm.get(s2).add(s);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(slhm.values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最长连续序列"><a href="#最长连续序列" class="headerlink" title="最长连续序列"></a>最长连续序列</h2>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高频SQL50题（基础版）刷题 记录</title>
    <link href="/2023/09/16/%E9%AB%98%E9%A2%91SQL50%E9%A2%98%EF%BC%88%E5%9F%BA%E7%A1%80%E7%89%88%EF%BC%89%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/16/%E9%AB%98%E9%A2%91SQL50%E9%A2%98%EF%BC%88%E5%9F%BA%E7%A1%80%E7%89%88%EF%BC%89%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>酒桌礼仪</title>
    <link href="/2023/09/16/%E9%85%92%E6%A1%8C%E7%A4%BC%E4%BB%AA/"/>
    <url>/2023/09/16/%E9%85%92%E6%A1%8C%E7%A4%BC%E4%BB%AA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>必备技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+gitee搭建个人博客（详细）</title>
    <link href="/2023/09/02/hexo+gitee/"/>
    <url>/2023/09/02/hexo+gitee/</url>
    
    <content type="html"><![CDATA[<h1 id="一-前期准备"><a href="#一-前期准备" class="headerlink" title="一.前期准备"></a>一.前期准备</h1><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><ol><li><p>下载Git：<a href="https://git-scm.com/downloads/">https://git-scm.com/downloads/</a></p></li><li><p>下载对应的exe文件，选择合适的安装路径，一路next即可</p></li><li><p>安装完成后打开cmd，输入如下代码，如果出现版本信息证明安装成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/02/hexo+gitee/image-20230902103728706.png" alt="image-20230902103728706"></p></li><li><p>此时在桌面点击右键会出现git相关标识</p><p><img src="/2023/09/02/hexo+gitee/image-20230902103912191.png" alt="image-20230902103912191"></p></li><li></li></ol><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h2><ol><li><p>下载安装Node.js：<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></p></li><li><p>安装完成后打开cmd，输入如下代码，如果出现版本信息证明安装成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/02/hexo+gitee/image-20230902133219986.png" alt="image-20230902133219986"></p></li><li></li></ol><h2 id="3-安装cnpm"><a href="#3-安装cnpm" class="headerlink" title="3. 安装cnpm"></a>3. 安装cnpm</h2><ol><li><p>打开cmd，输入如下命令，安装cnpm</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry==https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li><li><p>由于安装的是高版本，后续可能会出现问题，如果有顾虑可以卸载，安装一个指定版本的cnpm</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> uninstall -g cnpm<br><br><span class="hljs-attribute">npm</span> install cnpm@<span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> -g<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4. 安装hexo"></a>4. 安装hexo</h2><ol><li><p>打开cmd，输入如下命令，安装hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li><p>输入如下命令，如果出现hexo版本信息，说明安装成功</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span> <br></code></pre></td></tr></table></figure></li></ol><h1 id="二-创建博客"><a href="#二-创建博客" class="headerlink" title="二.创建博客"></a>二.创建博客</h1><h2 id="1-在gitee中创建仓库并配置"><a href="#1-在gitee中创建仓库并配置" class="headerlink" title="1. 在gitee中创建仓库并配置"></a>1. 在gitee中创建仓库并配置</h2><ol><li><p>在gitee中创建仓库，仓库名字任意，不过路径最好和前面的个人空间地址（用户名）一致，如下：</p><p><img src="/2023/09/02/hexo+gitee/image-20230902155803996.png" alt="image-20230902155803996"></p><p>若两者一致，则最终生成的博客地址会相对缩短（相同的部分会省略）：</p><p><img src="/2023/09/02/hexo+gitee/image-20230902160331865.png" alt="image-20230902160331865"></p><p>否则会很长，比如起名为“wu_hua_rou123”，会产生如下地址：</p><p><img src="/2023/09/02/hexo+gitee/image-20230902160440238.png" alt="image-20230902160440238"></p></li><li><p>打开c盘用户目录，在地址栏输入git bash打开面板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">ls</span> <br>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><p>第三条命令是使用ed25519算法来生成密钥，此时在~&#x2F;.ssh目录下会生成两个文件：</p><p>id_加密算法名、id_加密算法名.pub</p><p><img src="/2023/09/02/hexo+gitee/image-20230902161733431.png" alt="image-20230902161733431"></p><p>其中 id_加密算法名.pub 内是公钥，此时在gitee右上角头像处点击设置，左侧栏中点击SSH公钥，将文件中的公钥粘贴过去，并设置一个标题</p></li><li><p>测试SSH连接</p><p>在刚才打开的git bash窗口中，输入如下指令：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@gitee</span>.com<br></code></pre></td></tr></table></figure><p>如果看到successfully即为连接成功：</p><p><img src="/2023/09/02/hexo+gitee/image-20230902162946941.png" alt="image-20230902162946941"></p></li></ol><p>​</p><h2 id="2-初始化博客"><a href="#2-初始化博客" class="headerlink" title="2. 初始化博客"></a>2. 初始化博客</h2><ol><li><p>在任意位置新建文件夹用于存放博客（文件夹名字尽量不要中文）</p></li><li><p>在新建的目录下打开git bash，输入如下指令，初始化博客</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>初始化成功后会生成一堆文件</p><p><img src="/2023/09/02/hexo+gitee/image-20230902164014663.png" alt="image-20230902164014663"></p></li></ol><h2 id="3-部署到gitee"><a href="#3-部署到gitee" class="headerlink" title="3. 部署到gitee"></a>3. 部署到gitee</h2><ol><li><p>打开 _config.yml 文件，找到最下面的deploy，进行如下设置：</p><p>冒号后一定要有空格！！！这是yml语法规定的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@gitee.com:wu_hua_rou/wu_hua_rou.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>其中repository后设置的是gitee仓库的SSH地址，可以在博客的代码页面获取</p><p><img src="/2023/09/02/hexo+gitee/image-20230902164524585.png" alt="image-20230902164524585"></p></li><li><p>在仓库首页点击 服务–&gt;Gitee Pages，进行实名认证（需要上传手持身份证照片，还需要等好几天，非常麻烦）</p><p>实名认证成功后就会出现博客地址</p><p><img src="/2023/09/02/hexo+gitee/image-20230902165021546.png" alt="image-20230902165021546"></p></li><li><p>勾选强制使用HTTPS，点击启动 或 更新，打开网址即可看到初始的hexo博客界面，类似下图：</p><p><img src="/2023/09/02/hexo+gitee/image-20230902174237139.png" alt="image-20230902174237139"></p></li></ol><h1 id="三-更换主题（Fluid）"><a href="#三-更换主题（Fluid）" class="headerlink" title="三.更换主题（Fluid）"></a>三.更换主题（Fluid）</h1><p>hexo官方主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>这里使用的是比较火的简约主题Fluid：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><h2 id="1-获取最新版本"><a href="#1-获取最新版本" class="headerlink" title="1.获取最新版本"></a>1.获取最新版本</h2><p>获取最新的release版本：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>下载，解压到 themes 目录，并将解压出的文件夹重命名为：fluid</p><p><img src="/2023/09/02/hexo+gitee/image-20230902183816716.png" alt="image-20230902183816716"></p><h2 id="2-修改设置"><a href="#2-修改设置" class="headerlink" title="2. 修改设置"></a>2. 修改设置</h2><p>在根目录下的_config.yml，做以下两个修改（别忘了冒号后有空格）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <br></code></pre></td></tr></table></figure><h2 id="3-创建“关于”页"><a href="#3-创建“关于”页" class="headerlink" title="3. 创建“关于”页"></a>3. 创建“关于”页</h2><p>Fluid主题中的“关于”页面是需要单独创建的</p><p><img src="/2023/09/02/hexo+gitee/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2023-09-02-184144.jpg"></p><ol><li><p>在根目录下打开cmd，输入：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure></li><li><p>修改 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性，如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li></ol><p>博客图片怎么显示？</p><h1 id="四-发布文章"><a href="#四-发布文章" class="headerlink" title="四.发布文章"></a>四.发布文章</h1><h2 id="1-写文章"><a href="#1-写文章" class="headerlink" title="1.写文章"></a>1.写文章</h2><p>在博客根目录下 source\_posts 下写markdown类型文章</p><p>文档最上方按如下格式书写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">博客标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">创建日期（格式：</span> <span class="hljs-number">2023</span><span class="hljs-string">/9/02</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25）</span><br><span class="hljs-attr">updated:</span> <span class="hljs-string">修改日期</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><span class="hljs-string">（开启评论），false（关闭评论）</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">文章所属分类</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="2-发布文章"><a href="#2-发布文章" class="headerlink" title="2.发布文章"></a>2.发布文章</h2><p>在博客根目录下打开cmd，输入如下命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo clean&amp;hexo g&amp;hexo s<br></code></pre></td></tr></table></figure><p>此后访问 <a href="http://localhost:4000/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E5%8D%9A%E5%AE%A2">http://localhost:4000/，即可看到更新后的博客</a></p><p>在cmd中输入ctrl+c即可关闭</p><p>此后输入如下命令，即可将最新内容推送至远程仓库，从而更新博客 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>必备技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标题</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>这里写关于页的正文，支持 Markdown, HTML</p>]]></content>
    
  </entry>
  
  
  
</search>
